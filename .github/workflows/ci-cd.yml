name: Google Shopping CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      ECR_REPOSITORY: google-shopping
      CLUSTER_NAME: google-eks
      DEPLOYMENT_FILE: kubernetes/deployment.yml
      EC2_USER: ${{ secrets.EC2_USER }}
      EC2_HOST: ${{ secrets.EC2_HOST }}

    steps:
      - name: üßæ Checkout Code
        uses: actions/checkout@v4

      - name: üîë Setup SSH Key
        run: |
          echo "${{ secrets.EC2_PRIVATE_KEY }}" > ec2-key.pem
          chmod 600 ec2-key.pem
          echo "‚úÖ SSH key written"

      - name: üß† Verify EC2 Connection
        run: |
          ssh -i ec2-key.pem -o StrictHostKeyChecking=no ${{ env.EC2_USER }}@${{ env.EC2_HOST }} "echo '‚úÖ Connected to EC2 successfully!'"

      - name: üöÄ Build and Push Docker Image on EC2
        run: |
          ssh -i ec2-key.pem -o StrictHostKeyChecking=no ${{ env.EC2_USER }}@${{ env.EC2_HOST }} << 'EOF'
            set -e
            echo "üöÄ Connected to EC2 and starting build..."
            sudo yum install -y docker awscli git || true
            sudo service docker start

            ACCOUNT_ID=${{ env.AWS_ACCOUNT_ID }}
            REGION=${{ env.AWS_REGION }}
            REPO=${{ env.ECR_REPOSITORY }}
            IMAGE_TAG=$(date +%Y%m%d%H%M%S)
            IMAGE_URI=$ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com/$REPO:$IMAGE_TAG

            echo "üîß Creating repo if missing..."
            aws ecr describe-repositories --repository-names $REPO --region $REGION >/dev/null 2>&1 || \
              aws ecr create-repository --repository-name $REPO --region $REGION

            echo "üîê Logging in to ECR..."
            aws ecr get-login-password --region $REGION | sudo docker login --username AWS --password-stdin $ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com

            echo "üì¶ Cloning repo and building Docker image..."
            cd ~/app || mkdir ~/app && cd ~/app
            rm -rf *
            git clone https://github.com/${{ github.repository }} .
            sudo docker build -t $IMAGE_URI .
            sudo docker push $IMAGE_URI

            echo $IMAGE_URI > ~/image_uri.txt
            echo "‚úÖ Image pushed to ECR: $IMAGE_URI"
          EOF

      - name: üñºÔ∏è Update Kubernetes Deployment in Git
        run: |
          IMAGE_URI=$(ssh -i ec2-key.pem -o StrictHostKeyChecking=no ${{ env.EC2_USER }}@${{ env.EC2_HOST }} 'cat ~/image_uri.txt')
          echo "üñºÔ∏è Using image: $IMAGE_URI"

          sed -i "s|image: .*|image: $IMAGE_URI|g" ${{ env.DEPLOYMENT_FILE }}
          git config user.name "github-actions[bot]"
          git config user.email "github-actions@github.com"
          git add ${{ env.DEPLOYMENT_FILE }}
          git commit -m "üîÑ Updated image to $IMAGE_URI" || echo "No changes to commit"
          git push

      - name: ‚ò∏Ô∏è Deploy to Kubernetes (EKS)
        run: |
          sudo apt-get install -y awscli kubectl
          aws configure set region ${{ env.AWS_REGION }}
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}
          kubectl apply -f kubernetes/deployment.yml
          kubectl apply -f kubernetes/service.yml
          kubectl rollout status deployment/google-shopping-deployment
