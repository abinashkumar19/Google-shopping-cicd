name: CI/CD to EC2 + ECR + Kubernetes

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ap-south-1
  ECR_REPOSITORY: google-shopping
  DEPLOYMENT_FILE: k8s/deployment.yml
  SERVICE_FILE: k8s/service.yml
  EC2_USER: ec2-user

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: üßæ Checkout repository
        uses: actions/checkout@v4

      - name: ‚öôÔ∏è Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: üîë Decode and save SSH key
        run: |
          echo "${{ secrets.EC2_PEM_B64 }}" | base64 -d > ec2-key.pem
          chmod 700 ec2-key.pem

      - name: üê≥ Build & Push Docker image to ECR
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          IMAGE_TAG=$(date +%Y%m%d%H%M%S)
          IMAGE_URI=$ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG

          echo "üß© Image URI: $IMAGE_URI"

          aws ecr describe-repositories --repository-names $ECR_REPOSITORY || \
          aws ecr create-repository --repository-name $ECR_REPOSITORY

          docker build -t $IMAGE_URI .
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
          docker push $IMAGE_URI

          echo $IMAGE_URI > image_uri.txt

      - name: üöÄ Deploy to EC2 and Apply Kubernetes
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          echo "üì§ Copying image URI file to EC2..."
          scp -i ec2-key.pem -o StrictHostKeyChecking=no image_uri.txt $EC2_USER@$EC2_HOST:/home/ec2-user/

          echo "üíª Connecting to EC2..."
          ssh -i ec2-key.pem -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST << 'EOF'
            set -e
            echo "‚úÖ Connected to EC2 instance"

            IMAGE_URI=$(cat /home/ec2-user/image_uri.txt)
            echo "üñº  Using image: $IMAGE_URI"

            APP_DIR="/home/ec2-user/app"
            DEPLOY_FILE="$APP_DIR/k8s/deployment.yml"
            SERVICE_FILE="$APP_DIR/k8s/service.yml"

            mkdir -p $APP_DIR

            if [ ! -d "$APP_DIR/.git" ]; then
              echo "üì¶ Cloning application repository..."
              git clone https://github.com/abinashkumar19/Google-shopping-cicd.git $APP_DIR
            fi

            cd $APP_DIR

            echo "üîÑ Resetting local changes and pulling latest from GitHub..."
            git fetch origin main
            git reset --hard origin/main

            echo "üìù Updating deployment image..."
            if [ -f "$DEPLOY_FILE" ]; then
              sed -i "s|image: .*|image: ${IMAGE_URI}|g" $DEPLOY_FILE
            else
              echo "‚ùå Deployment YAML not found!"
              ls -R $APP_DIR
              exit 1
            fi

            echo "‚öôÔ∏è Applying Kubernetes manifests..."
            if command -v kubectl &> /dev/null; then
              kubectl apply -f $DEPLOY_FILE
              if [ -f "$SERVICE_FILE" ]; then
                kubectl apply -f $SERVICE_FILE
              else
                echo "‚ö†Ô∏è Service file missing, skipped."
              fi
            else
              echo "‚ö†Ô∏è kubectl not installed. Installing..."
              curl -LO "https://dl.k8s.io/release/$(curl -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
              chmod +x kubectl && sudo mv kubectl /usr/local/bin/
              kubectl apply -f $DEPLOY_FILE
              [ -f "$SERVICE_FILE" ] && kubectl apply -f $SERVICE_FILE
            fi

            echo "üöÄ Deployment completed successfully!"
          EOF
