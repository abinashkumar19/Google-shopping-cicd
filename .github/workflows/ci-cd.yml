name: CI/CD to ECR + Kubernetes

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ap-south-1
  ECR_REPOSITORY: google-shopping
  DEPLOYMENT_FILE: k8s/deployment.yml
  SERVICE_FILE: k8s/service.yml
  KUBE_CONFIG_B64: ${{ secrets.KUBE_CONFIG_B64 }} # base64-encoded kubeconfig

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: 🧾 Checkout repository
        uses: actions/checkout@v4

      - name: ⚙️ Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 🔑 Decode and save kubeconfig
        run: |
          echo "${{ secrets.KUBE_CONFIG_B64 }}" | base64 -d > kubeconfig
          export KUBECONFIG=$(pwd)/kubeconfig

      - name: 🐳 Build & Push Docker Image to ECR
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          IMAGE_TAG=$(date +%Y%m%d%H%M%S)
          IMAGE_URI=$ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG

          echo "🧩 Image URI: $IMAGE_URI"

          aws ecr describe-repositories --repository-names $ECR_REPOSITORY || \
          aws ecr create-repository --repository-name $ECR_REPOSITORY

          docker build -t $IMAGE_URI .
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
          docker push $IMAGE_URI

          echo $IMAGE_URI > image_uri.txt
          echo "✅ Docker image pushed: $IMAGE_URI"

      - name: 📝 Update deployment YAML
        run: |
          IMAGE_URI=$(cat image_uri.txt)
          echo "🖼 Updating deployment with image $IMAGE_URI"
          sed -i "s|image: .*|image: $IMAGE_URI|g" $DEPLOYMENT_FILE

      - name: 🚀 Apply Kubernetes manifests
        run: |
          kubectl apply -f $DEPLOYMENT_FILE
          kubectl apply -f $SERVICE_FILE
          echo "🎉 Kubernetes deployment & service applied successfully!"
